{"version":3,"sources":["utils/FetchClient.ts","types/Sort.ts","api/todos.ts","context/index.ts","components/Error.tsx","components/Filter.tsx","components/Footer.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/Header.tsx","App.tsx","utils/useLocalStorage.js","utils/useFilter.js","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","Sort","client","updateTodo","todoId","emptyFunction","TodosContext","React","createContext","isLoading","todos","addTodo","deleteTodo","editTodo","isInputDisabled","handleRemoveCompletedTodos","setSort","sort","All","errorType","setErrorType","handleToggleAll","loadingTodo","tempTodo","activeTodos","completedTodos","isCompletedTodos","useTodosContext","context","useContext","undefined","useEffect","timer","clearTimeout","className","classNames","hidden","type","onClick","aria-label","Filter","to","isActive","selected","Active","Completed","Footer","length","todoapp__hidden","TodoItem","todo","id","title","completed","useState","isEditing","setIsEditing","newTitle","setNewTitle","includes","onSubmit","trim","htmlFor","checked","onChange","value","event","target","onKeyDown","key","preventDefault","stopPropagation","onBlur","onDoubleClick","TodoList","TransitionGroup","map","CSSTransition","timeout","Header","setTitle","active","placeholder","disabled","USER_ID","App","setLoading","initialValue","parse","localStorage","getItem","setValue","val","setItem","useLocalStorage","setTodos","errorMessage","setErrorMessage","sortBy","setSortBy","setIsInputDisabled","setTempTodo","setLoadingTodo","location","useLocation","sortedTodos","useMemo","filter","pathname","slice","useFilter","every","fetchTodos","useCallback","a","todosData","userId","newTodo","removeTodo","selectedTodoId","prevTodo","state","stateItem","forEach","Provider","item","todoElem","Root","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.dfb93d4c.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// @typescript-eslint/no-shadow\nexport enum Sort {\n  All = '',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { NewTodo, Todo } from '../types/Todo';\nimport { client } from '../utils/FetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (userId: number, data: NewTodo) => {\n  return client.post<Todo>(`/todos?userId=${userId}`, data);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (\n  todoId: number,\n  data: {\n    completed?: boolean,\n    title?: string,\n  },\n) => {\n  return client.patch<Todo>(`/todos/${todoId}`, data);\n};\n","import React from 'react';\nimport { Sort } from '../types/Sort';\nimport { TodosContextType } from '../types/TodoContext';\n\nconst emptyFunction = () => {};\n\nconst TodosContext = React.createContext<TodosContextType>({\n  isLoading: false,\n  todos: [],\n  addTodo: emptyFunction,\n  deleteTodo: emptyFunction,\n  editTodo: emptyFunction,\n  isInputDisabled: false,\n  handleRemoveCompletedTodos: emptyFunction,\n  setSort: emptyFunction,\n  sort: Sort.All,\n  errorType: '',\n  setErrorType: emptyFunction,\n  handleToggleAll: emptyFunction,\n  loadingTodo: [],\n  tempTodo: null,\n  activeTodos: [],\n  completedTodos: [],\n  isCompletedTodos: false,\n});\n\nexport const useTodosContext = () => {\n  const context = React.useContext(TodosContext);\n\n  if (context === undefined) {\n    throw new Error('Context must be used within a Provider');\n  }\n\n  return context;\n};\n\nexport default TodosContext;\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\n\nimport { useTodosContext } from '../context';\n\nexport const Error = () => {\n  const { errorType, setErrorType } = useTodosContext();\n\n  const handleCloseError = () => {\n    setErrorType('');\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setErrorType('');\n    },\n    3000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [errorType]);\n\n  return (\n    <div\n      className={classNames(\n        'notification is-danger is-light has-text-weight-normal',\n        { hidden: !errorType },\n      )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={handleCloseError}\n        aria-label=\"delete\"\n      />\n\n      {errorType}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Sort } from '../types/Sort';\n\nexport const Filter = () => {\n  return (\n    <nav className=\"filter\">\n      <NavLink\n        to={`/${Sort.All}`}\n        className={({ isActive }) => classNames(\n          'filter__link',\n          { selected: isActive },\n        )}\n      >\n        All\n      </NavLink>\n\n      <NavLink\n        to={`/${Sort.Active}`}\n        className={({ isActive }) => classNames(\n          'filter__link',\n          { selected: isActive },\n        )}\n      >\n        Active\n      </NavLink>\n\n      <NavLink\n        to={`/${Sort.Completed}`}\n        className={({ isActive }) => classNames(\n          'filter__link',\n          { selected: isActive },\n        )}\n      >\n        Completed\n      </NavLink>\n    </nav>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Filter } from './Filter';\nimport { useTodosContext } from '../context';\n\nexport const Footer = () => {\n  const {\n    handleRemoveCompletedTodos,\n    activeTodos,\n    completedTodos,\n  } = useTodosContext();\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos.length} items left`}\n      </span>\n\n      <Filter />\n\n      <button\n        type=\"button\"\n        className={classNames(\n          'todoapp__clear-completed',\n          { todoapp__hidden: !completedTodos.length },\n        )}\n        onClick={handleRemoveCompletedTodos}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useTodosContext } from '../context';\nimport '../styles/todo.scss';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(title);\n\n  const { deleteTodo, editTodo, loadingTodo } = useTodosContext();\n\n  const isLoading = todo.id && loadingTodo.includes(todo?.id);\n\n  const handleChangeTodoTitle\n  = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleCancelEditing = () => {\n    setIsEditing(false);\n    setNewTitle(title);\n  };\n\n  const onSubmit = (): void => {\n    if (newTitle.trim()) {\n      editTodo(id, { title: newTitle });\n    } else {\n      deleteTodo(id);\n    }\n\n    setIsEditing(false);\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      event.stopPropagation();\n      onSubmit();\n    }\n\n    if (event.key === 'Escape') {\n      handleCancelEditing();\n    }\n  };\n\n  const handleChangeOnBlur = () => {\n    onSubmit();\n  };\n\n  return (\n    <div className={classNames(\n      'todo',\n      { completed },\n    )}\n    >\n      <label htmlFor=\"first\" className=\"todo__status-label\">\n        <input\n          id=\"first\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onChange={() => editTodo(id, { completed: !todo.completed })}\n        />\n      </label>\n\n      {isEditing ? (\n        <input\n          type=\"text\"\n          className=\"todo__title-field\"\n          value={newTitle}\n          onChange={handleChangeTodoTitle}\n          onKeyDown={onKeyDown}\n          onBlur={handleChangeOnBlur}\n        />\n      ) : (\n        <>\n          <span\n            className=\"todo__title\"\n            onDoubleClick={handleDoubleClick}\n          >\n            {title}\n          </span>\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            onClick={() => deleteTodo(id)}\n          >\n            ×\n          </button>\n        </>\n      )}\n      <div\n        className={classNames(\n          'modal overlay',\n          { 'is-active': isLoading },\n        )}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { TodoItem } from './TodoItem';\nimport { useTodosContext } from '../context';\n\nexport const TodoList: React.FC = () => {\n  const { todos, tempTodo } = useTodosContext();\n\n  return (\n    <section className=\"todoapp__main\">\n      <TransitionGroup>\n        {todos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n            />\n          </CSSTransition>\n        ))}\n        {tempTodo && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"temp-item\"\n          >\n            <TodoItem\n              todo={tempTodo}\n            />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n};\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { useTodosContext } from '../context';\n\nexport const Header = () => {\n  const [title, setTitle] = useState('');\n  const {\n    addTodo,\n    todos,\n    isInputDisabled,\n    handleToggleAll,\n    isCompletedTodos,\n  } = useTodosContext();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    addTodo(title);\n    setTitle('');\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n\n      {todos.length > 0 && (\n        <button\n          type=\"button\"\n          className={classNames(\n            'todoapp__toggle-all',\n            { active: isCompletedTodos },\n          )}\n          onClick={handleToggleAll}\n          aria-label=\"active\"\n        />\n      )}\n\n      <form onSubmit={handleFormSubmit}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          disabled={isInputDisabled}\n          value={title}\n          onChange={handleInputChange}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  createTodo, deleteTodo, getTodos, updateTodo,\n} from './api/todos';\nimport { Todo } from './types/Todo';\nimport { Error } from './components/Error';\nimport { Footer } from './components/Footer';\nimport { TodoList } from './components/TodoList';\nimport { Header } from './components/Header';\nimport { useFilter } from './utils/useFilter';\nimport { Sort } from './types/Sort';\nimport TodosContext from './context';\nimport { useLocalStorage } from './utils/useLocalStorage';\n\nconst USER_ID = 6771;\n\nexport const App: React.FC = () => {\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [sortBy, setSortBy] = useState<Sort>(Sort.All);\n  const [isInputDisabled, setIsInputDisabled] = useState<boolean>(false);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [loadingTodo, setLoadingTodo] = useState<number[]>([0]);\n  const location = useLocation();\n\n  const sortedTodos = useFilter(todos, location);\n  const activeTodos = todos.filter((todo: Todo) => !todo.completed);\n  const completedTodos = todos.filter((todo: Todo) => todo.completed);\n  const isCompletedTodos = todos.every((todo: Todo) => todo.completed);\n\n  const fetchTodos = useCallback(async () => {\n    try {\n      setLoading(true);\n      const todosData = await getTodos(USER_ID);\n\n      setTodos(todosData);\n    } catch {\n      setErrorMessage('Error loading data');\n    } finally {\n      setLoading(false);\n    }\n  }, [setTodos, setLoading, setErrorMessage]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const addTodo = async (title: string) => {\n    if (!title.trim()) {\n      setErrorMessage('Title can\\'t be empty');\n\n      return;\n    }\n\n    setIsInputDisabled(true);\n\n    try {\n      const newTodo = await createTodo(USER_ID, {\n        title,\n        userId: USER_ID,\n        completed: false,\n      });\n\n      setTempTodo({ ...newTodo, id: 0 });\n\n      setTodos([...todos, newTodo]);\n    } catch {\n      setErrorMessage('Unable to add a todo');\n    } finally {\n      setIsInputDisabled(false);\n      setTempTodo(null);\n    }\n  };\n\n  const removeTodo = useCallback(async (selectedTodoId: number) => {\n    setLoadingTodo((prevTodo) => [...prevTodo, selectedTodoId]);\n    try {\n      await deleteTodo(selectedTodoId);\n      setTodos((state: Todo[]) => (\n        state.filter(stateItem => stateItem.id !== selectedTodoId)));\n    } catch {\n      setErrorMessage('Unable to delete a todo');\n    } finally {\n      setLoadingTodo([0]);\n    }\n  }, [setErrorMessage, setLoading, setTodos]);\n\n  const handleRemoveCompletedTodos = useCallback(() => {\n    completedTodos.forEach((todo: Todo) => removeTodo(todo.id));\n    setTodos(activeTodos);\n  }, [todos]);\n\n  const editTodo = async (id: number,\n    data: {\n      completed?: boolean,\n      title?: string,\n    }) => {\n    setLoadingTodo((prevTodo) => [...prevTodo, id]);\n    try {\n      await updateTodo(id, data);\n      setTodos((state: Todo[]) => state.map(todo => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          ...data,\n        };\n      }));\n    } catch {\n      setErrorMessage('Unable to edit a todo');\n    } finally {\n      setLoadingTodo([0]);\n    }\n  };\n\n  const handleToggleAll = () => {\n    if (isCompletedTodos) {\n      completedTodos.map((item: Todo) => {\n        return editTodo(item.id, { completed: false });\n      });\n    } else {\n      sortedTodos.map((todoElem: Todo) => {\n        return editTodo(todoElem.id, { completed: true });\n      });\n    }\n  };\n\n  return (\n    <TodosContext.Provider value={{\n      isLoading,\n      todos: sortedTodos,\n      deleteTodo: removeTodo,\n      editTodo,\n      addTodo,\n      isInputDisabled,\n      handleRemoveCompletedTodos,\n      setSort: setSortBy,\n      sort: sortBy,\n      errorType: errorMessage,\n      setErrorType: setErrorMessage,\n      handleToggleAll,\n      loadingTodo,\n      tempTodo,\n      activeTodos,\n      completedTodos,\n      isCompletedTodos,\n    }}\n    >\n      <div className=\"todoapp\">\n        <h1 className=\"todoapp__title\">todos</h1>\n        <div className=\"todoapp__content\">\n          <Header />\n          <TodoList />\n          {sortedTodos.length > 0 && <Footer />}\n        </div>\n\n        {errorMessage && (\n          <Error />\n        )}\n      </div>\n    </TodosContext.Provider>\n  );\n};\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key) || '') || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (val) => {\n    setValue(val);\n    localStorage.setItem(key, JSON.stringify(val));\n  };\n\n  return [value, save];\n};\n","import { useMemo } from 'react';\nimport { Sort } from '../types/Sort';\n\nexport const useFilter = (todos, location) => {\n  const modifiedTodos = useMemo(() => {\n    return (todos\n      .filter(todo => {\n        switch (location.pathname.slice(1)) {\n          case Sort.Active:\n            return !todo.completed;\n          case Sort.Completed:\n            return todo.completed;\n          case Sort.All:\n          default:\n            return todo;\n        }\n      })\n    );\n  }, [todos, location]);\n\n  return modifiedTodos;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nconst Root = () => (\n  <HashRouter>\n    <App />\n  </HashRouter>\n);\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\n\nroot.render(<Root />);\n"],"sourceRoot":""}